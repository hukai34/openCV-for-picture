#include <opencv2/opencv.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <vector>
using namespace cv;
using namespace std;

#define WINDOW_NAME "[程序窗口]"

void on_MouseHandle(int event, int x, int y, int flags, void* param);
void DrawRectangle(cv::Mat& img, cv::Rect box);

//Rect矩形类
Rect g_rectangle;
bool g_bDrawingBox = false;
RNG g_rng(12345);

int main(int argc, char** argv)
{
	g_rectangle = Rect(-1,-1,0,0);
	Mat srcImage(600, 800, CV_8UC3), tempImage;
	srcImage.copyTo(tempImage);
	srcImage = Scalar::all(0);

	namedWindow(WINDOW_NAME);
        //添加鼠标交互操作
	setMouseCallback(WINDOW_NAME, on_MouseHandle,(void*)&srcImage);

	while(1)
	{
		srcImage.copyTo(tempImage);

		if(g_bDrawingBox)
			DrawRectangle(tempImage,g_rectangle);

		imshow(WINDOW_NAME,tempImage);
                //按ESC退出
		if(waitKey(10) == 27)
			break;
	}

	return 0;

}

//鼠标事件处理
void on_MouseHandle(int event, int x, int y, int flags, void* param)
{
	Mat& image = *(cv::Mat*) param;

	switch(event)
	{
         //鼠标移动
	 case EVENT_MOUSEMOVE:
		{
			if(g_bDrawingBox)
			{
			 g_rectangle.width = x-g_rectangle.x;
			 g_rectangle.height = y-g_rectangle.y;
			}
			break;
		}
         //鼠标左键按下
	 case EVENT_LBUTTONDOWN:
		 {
			 g_bDrawingBox = true;
			 g_rectangle = Rect(x,y,5,5);
			 break;
		 }
         //鼠标左键放开
	 case EVENT_LBUTTONUP:
		 {
			 g_bDrawingBox = false;

			 if(g_rectangle.width<0)
			 {
				 g_rectangle.x += g_rectangle.width;
				 g_rectangle.width *= -1;
			 }

			 if(g_rectangle.height<0)
			 {
				 g_rectangle.y += g_rectangle.height;
				 g_rectangle.height *= -1;
			 }

			 DrawRectangle(image,g_rectangle);
			 break;
		 }
	}
}

void DrawRectangle(cv::Mat& img, cv::Rect box)
{
	rectangle(img,box.tl(),box.br(),Scalar(g_rng.uniform(0,255),g_rng.uniform(0,255),g_rng.uniform(0,255)),5);
	//画矩形接口rectangle
}
